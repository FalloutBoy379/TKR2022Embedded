
Debugging_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000145c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800165c  0800165c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800165c  0800165c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800165c  0800165c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800165c  0800165c  0001165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001670  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001670  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007781  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013da  00000000  00000000  000277b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  00028b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbb2  00000000  00000000  00029d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009472  00000000  00000000  000398da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006331c  00000000  00000000  00042d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000258c  00000000  00000000  000a60b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001614 	.word	0x08001614

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08001614 	.word	0x08001614

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f9b7 	bl	8000586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f80c 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f8a0 	bl	8000360 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000220:	f000 f84a 	bl	80002b8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	i++;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <main+0x20>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	4a01      	ldr	r2, [pc, #4]	; (8000230 <main+0x20>)
 800022c:	6013      	str	r3, [r2, #0]
 800022e:	e7f9      	b.n	8000224 <main+0x14>
 8000230:	20000070 	.word	0x20000070

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 f9de 	bl	8001604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800026e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fc5d 	bl	8000b38 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000284:	f000 f8b8 	bl	80003f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fecb 	bl	800103c <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002ac:	f000 f8a4 	bl	80003f8 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3740      	adds	r7, #64	; 0x40
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08c      	sub	sp, #48	; 0x30
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	2224      	movs	r2, #36	; 0x24
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f99c 	bl	8001604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_TIM2_Init+0xa4>)
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <MX_TIM2_Init+0xa4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_TIM2_Init+0xa4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <MX_TIM2_Init+0xa4>)
 80002ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_TIM2_Init+0xa4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_TIM2_Init+0xa4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000304:	2301      	movs	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000310:	2300      	movs	r3, #0
 8000312:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000314:	2301      	movs	r3, #1
 8000316:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4619      	mov	r1, r3
 8000326:	480d      	ldr	r0, [pc, #52]	; (800035c <MX_TIM2_Init+0xa4>)
 8000328:	f000 ffc0 	bl	80012ac <HAL_TIM_Encoder_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000332:	f000 f861 	bl	80003f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_TIM2_Init+0xa4>)
 8000344:	f001 f8d4 	bl	80014f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800034e:	f000 f853 	bl	80003f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	3730      	adds	r7, #48	; 0x30
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000028 	.word	0x20000028

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <MX_GPIO_Init+0x90>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_GPIO_Init+0x94>)
 80003c4:	f000 fba0 	bl	8000b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d6:	2303      	movs	r3, #3
 80003d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x94>)
 80003e2:	f000 fa0d 	bl	8000800 <HAL_GPIO_Init>

}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40011000 	.word	0x40011000

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	e7fe      	b.n	8000400 <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_MspInit+0x5c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_MspInit+0x5c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x60>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x60>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000486:	d123      	bne.n	80004d0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	61d3      	str	r3, [r2, #28]
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_TIM_Encoder_MspInit+0x70>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004b8:	2303      	movs	r3, #3
 80004ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <HAL_TIM_Encoder_MspInit+0x74>)
 80004cc:	f000 f998 	bl	8000800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000526:	f000 f86b 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000562:	f7ff ffe4 	bl	800052e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 f829 	bl	80015bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe51 	bl	8000210 <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	08001664 	.word	0x08001664
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	20000078 	.word	0x20000078

08000584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_IRQHandler>

08000586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f904 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f805 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000596:	f7ff ff35 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
}
 800059c:	4618      	mov	r0, r3
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_InitTick+0x54>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x58>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f911 	bl	80007e6 <HAL_SYSTICK_Config>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00e      	b.n	80005ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d80a      	bhi.n	80005ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f8e7 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <HAL_InitTick+0x5c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000008 	.word	0x20000008
 8000620:	20000074 	.word	0x20000074

08000624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000074 	.word	0x20000074

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff90 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff49 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff5e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5f 	bl	800069c <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffb0 	bl	8000754 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b08b      	sub	sp, #44	; 0x2c
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000812:	e169      	b.n	8000ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000814:	2201      	movs	r2, #1
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	429a      	cmp	r2, r3
 800082e:	f040 8158 	bne.w	8000ae2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4a9a      	ldr	r2, [pc, #616]	; (8000aa0 <HAL_GPIO_Init+0x2a0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d05e      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
 800083c:	4a98      	ldr	r2, [pc, #608]	; (8000aa0 <HAL_GPIO_Init+0x2a0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d875      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 8000842:	4a98      	ldr	r2, [pc, #608]	; (8000aa4 <HAL_GPIO_Init+0x2a4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d058      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
 8000848:	4a96      	ldr	r2, [pc, #600]	; (8000aa4 <HAL_GPIO_Init+0x2a4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d86f      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 800084e:	4a96      	ldr	r2, [pc, #600]	; (8000aa8 <HAL_GPIO_Init+0x2a8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d052      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
 8000854:	4a94      	ldr	r2, [pc, #592]	; (8000aa8 <HAL_GPIO_Init+0x2a8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d869      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 800085a:	4a94      	ldr	r2, [pc, #592]	; (8000aac <HAL_GPIO_Init+0x2ac>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d04c      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
 8000860:	4a92      	ldr	r2, [pc, #584]	; (8000aac <HAL_GPIO_Init+0x2ac>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d863      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 8000866:	4a92      	ldr	r2, [pc, #584]	; (8000ab0 <HAL_GPIO_Init+0x2b0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d046      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
 800086c:	4a90      	ldr	r2, [pc, #576]	; (8000ab0 <HAL_GPIO_Init+0x2b0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d85d      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 8000872:	2b12      	cmp	r3, #18
 8000874:	d82a      	bhi.n	80008cc <HAL_GPIO_Init+0xcc>
 8000876:	2b12      	cmp	r3, #18
 8000878:	d859      	bhi.n	800092e <HAL_GPIO_Init+0x12e>
 800087a:	a201      	add	r2, pc, #4	; (adr r2, 8000880 <HAL_GPIO_Init+0x80>)
 800087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000880:	080008fb 	.word	0x080008fb
 8000884:	080008d5 	.word	0x080008d5
 8000888:	080008e7 	.word	0x080008e7
 800088c:	08000929 	.word	0x08000929
 8000890:	0800092f 	.word	0x0800092f
 8000894:	0800092f 	.word	0x0800092f
 8000898:	0800092f 	.word	0x0800092f
 800089c:	0800092f 	.word	0x0800092f
 80008a0:	0800092f 	.word	0x0800092f
 80008a4:	0800092f 	.word	0x0800092f
 80008a8:	0800092f 	.word	0x0800092f
 80008ac:	0800092f 	.word	0x0800092f
 80008b0:	0800092f 	.word	0x0800092f
 80008b4:	0800092f 	.word	0x0800092f
 80008b8:	0800092f 	.word	0x0800092f
 80008bc:	0800092f 	.word	0x0800092f
 80008c0:	0800092f 	.word	0x0800092f
 80008c4:	080008dd 	.word	0x080008dd
 80008c8:	080008f1 	.word	0x080008f1
 80008cc:	4a79      	ldr	r2, [pc, #484]	; (8000ab4 <HAL_GPIO_Init+0x2b4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d013      	beq.n	80008fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008d2:	e02c      	b.n	800092e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e029      	b.n	8000930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	3304      	adds	r3, #4
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e024      	b.n	8000930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	3308      	adds	r3, #8
 80008ec:	623b      	str	r3, [r7, #32]
          break;
 80008ee:	e01f      	b.n	8000930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	330c      	adds	r3, #12
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e01a      	b.n	8000930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000902:	2304      	movs	r3, #4
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e013      	b.n	8000930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d105      	bne.n	800091c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000910:	2308      	movs	r3, #8
 8000912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	611a      	str	r2, [r3, #16]
          break;
 800091a:	e009      	b.n	8000930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091c:	2308      	movs	r3, #8
 800091e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	615a      	str	r2, [r3, #20]
          break;
 8000926:	e003      	b.n	8000930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	e000      	b.n	8000930 <HAL_GPIO_Init+0x130>
          break;
 800092e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2bff      	cmp	r3, #255	; 0xff
 8000934:	d801      	bhi.n	800093a <HAL_GPIO_Init+0x13a>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	e001      	b.n	800093e <HAL_GPIO_Init+0x13e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3304      	adds	r3, #4
 800093e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d802      	bhi.n	800094c <HAL_GPIO_Init+0x14c>
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	e002      	b.n	8000952 <HAL_GPIO_Init+0x152>
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	3b08      	subs	r3, #8
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	210f      	movs	r1, #15
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	401a      	ands	r2, r3
 8000964:	6a39      	ldr	r1, [r7, #32]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	431a      	orrs	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 80b1 	beq.w	8000ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <HAL_GPIO_Init+0x2b8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a4c      	ldr	r2, [pc, #304]	; (8000ab8 <HAL_GPIO_Init+0x2b8>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <HAL_GPIO_Init+0x2b8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000998:	4a48      	ldr	r2, [pc, #288]	; (8000abc <HAL_GPIO_Init+0x2bc>)
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	3302      	adds	r3, #2
 80009a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	220f      	movs	r2, #15
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <HAL_GPIO_Init+0x2c0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d013      	beq.n	80009ec <HAL_GPIO_Init+0x1ec>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3f      	ldr	r2, [pc, #252]	; (8000ac4 <HAL_GPIO_Init+0x2c4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d00d      	beq.n	80009e8 <HAL_GPIO_Init+0x1e8>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d007      	beq.n	80009e4 <HAL_GPIO_Init+0x1e4>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a3d      	ldr	r2, [pc, #244]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d101      	bne.n	80009e0 <HAL_GPIO_Init+0x1e0>
 80009dc:	2303      	movs	r3, #3
 80009de:	e006      	b.n	80009ee <HAL_GPIO_Init+0x1ee>
 80009e0:	2304      	movs	r3, #4
 80009e2:	e004      	b.n	80009ee <HAL_GPIO_Init+0x1ee>
 80009e4:	2302      	movs	r3, #2
 80009e6:	e002      	b.n	80009ee <HAL_GPIO_Init+0x1ee>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <HAL_GPIO_Init+0x1ee>
 80009ec:	2300      	movs	r3, #0
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	f002 0203 	and.w	r2, r2, #3
 80009f4:	0092      	lsls	r2, r2, #2
 80009f6:	4093      	lsls	r3, r2
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fe:	492f      	ldr	r1, [pc, #188]	; (8000abc <HAL_GPIO_Init+0x2bc>)
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	3302      	adds	r3, #2
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	492c      	ldr	r1, [pc, #176]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4928      	ldr	r1, [pc, #160]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	4922      	ldr	r1, [pc, #136]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	491e      	ldr	r1, [pc, #120]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d021      	beq.n	8000ad4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60cb      	str	r3, [r1, #12]
 8000a9c:	e021      	b.n	8000ae2 <HAL_GPIO_Init+0x2e2>
 8000a9e:	bf00      	nop
 8000aa0:	10320000 	.word	0x10320000
 8000aa4:	10310000 	.word	0x10310000
 8000aa8:	10220000 	.word	0x10220000
 8000aac:	10210000 	.word	0x10210000
 8000ab0:	10120000 	.word	0x10120000
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40011400 	.word	0x40011400
 8000ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_GPIO_Init+0x304>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4909      	ldr	r1, [pc, #36]	; (8000b04 <HAL_GPIO_Init+0x304>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	fa22 f303 	lsr.w	r3, r2, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f47f ae8e 	bne.w	8000814 <HAL_GPIO_Init+0x14>
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	372c      	adds	r7, #44	; 0x2c
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40010400 	.word	0x40010400

08000b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b18:	787b      	ldrb	r3, [r7, #1]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b24:	e003      	b.n	8000b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	041a      	lsls	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	611a      	str	r2, [r3, #16]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e272      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 8087 	beq.w	8000c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b58:	4b92      	ldr	r3, [pc, #584]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d00c      	beq.n	8000b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b64:	4b8f      	ldr	r3, [pc, #572]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d112      	bne.n	8000b96 <HAL_RCC_OscConfig+0x5e>
 8000b70:	4b8c      	ldr	r3, [pc, #560]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b7c:	d10b      	bne.n	8000b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7e:	4b89      	ldr	r3, [pc, #548]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d06c      	beq.n	8000c64 <HAL_RCC_OscConfig+0x12c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d168      	bne.n	8000c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e24c      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d106      	bne.n	8000bae <HAL_RCC_OscConfig+0x76>
 8000ba0:	4b80      	ldr	r3, [pc, #512]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a7f      	ldr	r2, [pc, #508]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e02e      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x98>
 8000bb6:	4b7b      	ldr	r3, [pc, #492]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a7a      	ldr	r2, [pc, #488]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a77      	ldr	r2, [pc, #476]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e01d      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0xbc>
 8000bda:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a71      	ldr	r2, [pc, #452]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a6e      	ldr	r2, [pc, #440]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e00b      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a6a      	ldr	r2, [pc, #424]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b68      	ldr	r3, [pc, #416]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a67      	ldr	r2, [pc, #412]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d013      	beq.n	8000c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff fd06 	bl	8000624 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fd02 	bl	8000624 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b64      	cmp	r3, #100	; 0x64
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e200      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f0      	beq.n	8000c1c <HAL_RCC_OscConfig+0xe4>
 8000c3a:	e014      	b.n	8000c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fcf2 	bl	8000624 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fcee 	bl	8000624 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	; 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e1ec      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0x10c>
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d063      	beq.n	8000d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d11c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x18c>
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d116      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <HAL_RCC_OscConfig+0x176>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d001      	beq.n	8000cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e1c0      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cae:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4939      	ldr	r1, [pc, #228]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	e03a      	b.n	8000d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d020      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_RCC_OscConfig+0x270>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fca7 	bl	8000624 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cda:	f7ff fca3 	bl	8000624 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e1a1      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4927      	ldr	r1, [pc, #156]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
 8000d0c:	e015      	b.n	8000d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_RCC_OscConfig+0x270>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc86 	bl	8000624 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1c:	f7ff fc82 	bl	8000624 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e180      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d03a      	beq.n	8000dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d019      	beq.n	8000d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_RCC_OscConfig+0x274>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff fc66 	bl	8000624 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc62 	bl	8000624 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e160      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fa78 	bl	8001270 <RCC_Delay>
 8000d80:	e01c      	b.n	8000dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_RCC_OscConfig+0x274>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d88:	f7ff fc4c 	bl	8000624 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8e:	e00f      	b.n	8000db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc48 	bl	8000624 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d908      	bls.n	8000db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e146      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	42420000 	.word	0x42420000
 8000dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db0:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e9      	bne.n	8000d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a6 	beq.w	8000f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dce:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10d      	bne.n	8000df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a87      	ldr	r2, [pc, #540]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b85      	ldr	r3, [pc, #532]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d118      	bne.n	8000e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a7e      	ldr	r2, [pc, #504]	; (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fc09 	bl	8000624 <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e16:	f7ff fc05 	bl	8000624 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b64      	cmp	r3, #100	; 0x64
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e103      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f0      	beq.n	8000e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d106      	bne.n	8000e4a <HAL_RCC_OscConfig+0x312>
 8000e3c:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a6e      	ldr	r2, [pc, #440]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	e02d      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x334>
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a69      	ldr	r2, [pc, #420]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4a66      	ldr	r2, [pc, #408]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	6213      	str	r3, [r2, #32]
 8000e6a:	e01c      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x356>
 8000e74:	4b61      	ldr	r3, [pc, #388]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a60      	ldr	r2, [pc, #384]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	4b5e      	ldr	r3, [pc, #376]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a5d      	ldr	r2, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6213      	str	r3, [r2, #32]
 8000e8c:	e00b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a5a      	ldr	r2, [pc, #360]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	6213      	str	r3, [r2, #32]
 8000e9a:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a57      	ldr	r2, [pc, #348]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d015      	beq.n	8000eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fbb9 	bl	8000624 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb4:	e00a      	b.n	8000ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fbb5 	bl	8000624 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e0b1      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0ee      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x37e>
 8000ed8:	e014      	b.n	8000f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fba3 	bl	8000624 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	e00a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fb9f 	bl	8000624 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e09b      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1ee      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d105      	bne.n	8000f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8087 	beq.w	800102e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d061      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d146      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fb73 	bl	8000624 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff fb6f 	bl	8000624 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e06d      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f68:	d108      	bne.n	8000f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f023 020f 	bic.w	r2, r3, #15
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4921      	ldr	r1, [pc, #132]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a19      	ldr	r1, [r3, #32]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	491b      	ldr	r1, [pc, #108]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb43 	bl	8000624 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fb3f 	bl	8000624 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e03d      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x46a>
 8000fc0:	e035      	b.n	800102e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fb2c 	bl	8000624 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff fb28 	bl	8000624 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e026      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x498>
 8000fee:	e01e      	b.n	800102e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e019      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40007000 	.word	0x40007000
 8001004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_RCC_OscConfig+0x500>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	429a      	cmp	r2, r3
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	429a      	cmp	r2, r3
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0a0      	b.n	8001192 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800106e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800108a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4940      	ldr	r1, [pc, #256]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d040      	beq.n	800112c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e067      	b.n	8001192 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e05b      	b.n	8001192 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e053      	b.n	8001192 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f023 0203 	bic.w	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4929      	ldr	r1, [pc, #164]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010fc:	f7ff fa92 	bl	8000624 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	e00a      	b.n	800111a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fa8e 	bl	8000624 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e03b      	b.n	8001192 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 020c 	and.w	r2, r3, #12
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	429a      	cmp	r2, r3
 800112a:	d1eb      	bne.n	8001104 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d008      	beq.n	800114a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	4915      	ldr	r1, [pc, #84]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	490d      	ldr	r1, [pc, #52]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800116a:	f000 f81f 	bl	80011ac <HAL_RCC_GetSysClockFreq>
 800116e:	4602      	mov	r2, r0
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RCC_ClockConfig+0x160>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	4909      	ldr	r1, [pc, #36]	; (80011a0 <HAL_RCC_ClockConfig+0x164>)
 800117c:	5ccb      	ldrb	r3, [r1, r3]
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_RCC_ClockConfig+0x168>)
 8001184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_RCC_ClockConfig+0x16c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa08 	bl	80005a0 <HAL_InitTick>

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	0800164c 	.word	0x0800164c
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ac:	b490      	push	{r4, r7}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_RCC_GetSysClockFreq+0xb0>)
 80011b4:	f107 0414 	add.w	r4, r7, #20
 80011b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011c0:	1d3c      	adds	r4, r7, #4
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d002      	beq.n	80011f2 <HAL_RCC_GetSysClockFreq+0x46>
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d003      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x4c>
 80011f0:	e02a      	b.n	8001248 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011f6:	e02a      	b.n	800124e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	0c9b      	lsrs	r3, r3, #18
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	3338      	adds	r3, #56	; 0x38
 8001202:	443b      	add	r3, r7
 8001204:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d011      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	3338      	adds	r3, #56	; 0x38
 800121e:	443b      	add	r3, r7
 8001220:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
 8001236:	e004      	b.n	8001242 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <HAL_RCC_GetSysClockFreq+0xc0>)
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001246:	e002      	b.n	800124e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800124c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001250:	4618      	mov	r0, r3
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bc90      	pop	{r4, r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	0800162c 	.word	0x0800162c
 8001260:	0800163c 	.word	0x0800163c
 8001264:	40021000 	.word	0x40021000
 8001268:	007a1200 	.word	0x007a1200
 800126c:	003d0900 	.word	0x003d0900

08001270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <RCC_Delay+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <RCC_Delay+0x38>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0a5b      	lsrs	r3, r3, #9
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800128c:	bf00      	nop
  }
  while (Delay --);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	60fa      	str	r2, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <RCC_Delay+0x1c>
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000000 	.word	0x20000000
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e093      	b.n	80013e8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f8c7 	bl	8000468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 80012f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f000 f875 	bl	80013f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800132e:	f023 0303 	bic.w	r3, r3, #3
 8001332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4313      	orrs	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800134c:	f023 030c 	bic.w	r3, r3, #12
 8001350:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800135c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4313      	orrs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	011a      	lsls	r2, r3, #4
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	031b      	lsls	r3, r3, #12
 800137c:	4313      	orrs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800138a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4313      	orrs	r3, r2
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <TIM_Base_SetConfig+0xe8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00b      	beq.n	8001420 <TIM_Base_SetConfig+0x30>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140e:	d007      	beq.n	8001420 <TIM_Base_SetConfig+0x30>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <TIM_Base_SetConfig+0xec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d003      	beq.n	8001420 <TIM_Base_SetConfig+0x30>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <TIM_Base_SetConfig+0xf0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d108      	bne.n	8001432 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <TIM_Base_SetConfig+0xe8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d017      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001440:	d013      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <TIM_Base_SetConfig+0xec>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00f      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <TIM_Base_SetConfig+0xf0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00b      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <TIM_Base_SetConfig+0xf4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <TIM_Base_SetConfig+0xf8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d003      	beq.n	800146a <TIM_Base_SetConfig+0x7a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <TIM_Base_SetConfig+0xfc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d108      	bne.n	800147c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <TIM_Base_SetConfig+0xe8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00b      	beq.n	80014c0 <TIM_Base_SetConfig+0xd0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <TIM_Base_SetConfig+0xf4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d007      	beq.n	80014c0 <TIM_Base_SetConfig+0xd0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <TIM_Base_SetConfig+0xf8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d003      	beq.n	80014c0 <TIM_Base_SetConfig+0xd0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <TIM_Base_SetConfig+0xfc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d103      	bne.n	80014c8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	615a      	str	r2, [r3, #20]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	40000400 	.word	0x40000400
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40014000 	.word	0x40014000
 80014e8:	40014400 	.word	0x40014400
 80014ec:	40014800 	.word	0x40014800

080014f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001504:	2302      	movs	r3, #2
 8001506:	e04b      	b.n	80015a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d013      	beq.n	8001574 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d00e      	beq.n	8001574 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d009      	beq.n	8001574 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d004      	beq.n	8001574 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10c      	bne.n	800158e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800157a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40000800 	.word	0x40000800
 80015b8:	40014000 	.word	0x40014000

080015bc <__libc_init_array>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	2600      	movs	r6, #0
 80015c0:	4d0c      	ldr	r5, [pc, #48]	; (80015f4 <__libc_init_array+0x38>)
 80015c2:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <__libc_init_array+0x3c>)
 80015c4:	1b64      	subs	r4, r4, r5
 80015c6:	10a4      	asrs	r4, r4, #2
 80015c8:	42a6      	cmp	r6, r4
 80015ca:	d109      	bne.n	80015e0 <__libc_init_array+0x24>
 80015cc:	f000 f822 	bl	8001614 <_init>
 80015d0:	2600      	movs	r6, #0
 80015d2:	4d0a      	ldr	r5, [pc, #40]	; (80015fc <__libc_init_array+0x40>)
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <__libc_init_array+0x44>)
 80015d6:	1b64      	subs	r4, r4, r5
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	42a6      	cmp	r6, r4
 80015dc:	d105      	bne.n	80015ea <__libc_init_array+0x2e>
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e4:	4798      	blx	r3
 80015e6:	3601      	adds	r6, #1
 80015e8:	e7ee      	b.n	80015c8 <__libc_init_array+0xc>
 80015ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ee:	4798      	blx	r3
 80015f0:	3601      	adds	r6, #1
 80015f2:	e7f2      	b.n	80015da <__libc_init_array+0x1e>
 80015f4:	0800165c 	.word	0x0800165c
 80015f8:	0800165c 	.word	0x0800165c
 80015fc:	0800165c 	.word	0x0800165c
 8001600:	08001660 	.word	0x08001660

08001604 <memset>:
 8001604:	4603      	mov	r3, r0
 8001606:	4402      	add	r2, r0
 8001608:	4293      	cmp	r3, r2
 800160a:	d100      	bne.n	800160e <memset+0xa>
 800160c:	4770      	bx	lr
 800160e:	f803 1b01 	strb.w	r1, [r3], #1
 8001612:	e7f9      	b.n	8001608 <memset+0x4>

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
